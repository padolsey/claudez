#!/usr/bin/env bash
set -Eeuo pipefail
SELF_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(cd "$SELF_DIR/.." && pwd)"
. "$ROOT_DIR/lib/common.sh"
. "$ROOT_DIR/lib/docker.sh"
. "$ROOT_DIR/lib/render.sh"

VERIFY=0
NAME=""
SIZE_PROFILE=""

# Parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --verify) VERIFY=1; shift ;;
    --large) SIZE_PROFILE="large"; shift ;;
    --help)
      cat <<'EOF'
Usage: claudez create <name> [--verify] [--large]

Options:
  --verify  Wait for Traefik routing and verify connectivity
  --large   Use 5GB memory limit for heavy builds (default: 3GB)

Examples:
  claudez create myapp              # Standard 3GB limit
  claudez create bigapp --large     # 5GB for complex Next.js builds
EOF
      exit 0
      ;;
    -*) die "Unknown flag: $1 (try --help)" ;;
    *) NAME="$1"; shift ;;
  esac
done

[ -z "$NAME" ] && die "Usage: claudez create <name> [--verify] [--large] (try --help)"

load_env

# Override memory limits for large profile
if [ "$SIZE_PROFILE" = "large" ]; then
  MEM_LIMIT="${MEM_LIMIT_LARGE}"
  log "Using --large profile: ${MEM_LIMIT} memory limit"
fi
APP_DIR="${APPS_DIR}/${NAME}"
CONTAINER_NAME="${NAME}-app"

need docker

# Check if we've hit capacity limits
EXISTING_CONTAINERS=$(docker ps -a --filter "name=-app$" --format "{{.Names}}" | wc -l)

if [ "$EXISTING_CONTAINERS" -ge "$MAX_SANDBOXES" ]; then
  die "Maximum sandboxes ($MAX_SANDBOXES) reached. Current: $EXISTING_CONTAINERS

  This limit protects host stability. To create new sandboxes:
  - Stop idle ones: claudez stop <name>
  - Remove unused ones: claudez rm <name>
  - Check status: claudez ls"
fi

# Calculate total memory reservations to ensure we don't overcommit
TOTAL_RESERVED_MB=0
for container in $(docker ps -a --filter "name=-app$" --format "{{.Names}}"); do
  RESERVATION=$(docker inspect -f '{{.HostConfig.MemoryReservation}}' "$container" 2>/dev/null || echo "0")
  RESERVED_MB=$((RESERVATION / 1024 / 1024))
  TOTAL_RESERVED_MB=$((TOTAL_RESERVED_MB + RESERVED_MB))
done

NEW_RESERVATION_MB="${MEM_RESERVATION%m}"  # Strip 'm' suffix
TOTAL_AFTER=$((TOTAL_RESERVED_MB + NEW_RESERVATION_MB))

if [ "$TOTAL_AFTER" -gt "$MAX_SAFE_RESERVED_MB" ]; then
  log "WARNING: Total reserved memory would be ${TOTAL_AFTER}MB (limit: ${MAX_SAFE_RESERVED_MB}MB)"
  log "Creating anyway, but monitor 'Commit Limit' on status page closely."
fi

mkdir -p "$APP_DIR" "$APP_DIR/workspace"

ensure_network "$TRAEFIK_NETWORK"

# Anthropic key (host-side) - REQUIRED
# Priority: 1) $ANTHROPIC_API_KEY env var, 2) KEY_FILE
if [ -n "${ANTHROPIC_API_KEY:-}" ]; then
  log "Using ANTHROPIC_API_KEY from environment"
else
  ANTHROPIC_API_KEY=""
  # Expand tilde in KEY_FILE
  KEY_FILE_EXPANDED="${KEY_FILE/#\~/$HOME}"
  if [ -f "$KEY_FILE_EXPANDED" ]; then
    ANTHROPIC_API_KEY="$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' "$KEY_FILE_EXPANDED")"
    [ -z "$ANTHROPIC_API_KEY" ] && die "ERROR: $KEY_FILE_EXPANDED exists but is empty.

Please add your Anthropic API key:
  echo 'sk-ant-...' > $KEY_FILE_EXPANDED"
  else
    die "ERROR: No Anthropic API key found.

Please set your API key using one of these methods:

  1. Environment variable (recommended):
     export ANTHROPIC_API_KEY='sk-ant-...'
     # Add to ~/.bashrc or ~/.zshrc to persist

  2. Config file:
     mkdir -p ~/.config/claudez
     echo 'sk-ant-...' > ~/.config/claudez/anthropic_key

  3. Custom location:
     echo 'KEY_FILE=/path/to/your/key' >> ~/.claudezrc

Get your API key at: https://console.anthropic.com/"
  fi
fi

# .env inside app dir (container env)
cat > "${APP_DIR}/.env" <<EOF
ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
CLAUDE_HOME=/home/appuser
PORT=3000
HOST=0.0.0.0
CHOKIDAR_USEPOLLING=1
WATCHPACK_POLLING=true
NEXT_TELEMETRY_DISABLED=1
NODE_OPTIONS=--max-old-space-size=3584
EOF
chmod 600 "${APP_DIR}/.env"

# Templates
NAME="$NAME" DOMAIN_BASE="$DOMAIN_BASE" render "$ROOT_DIR/templates/vanilla.index.html.tmpl" "${APP_DIR}/workspace/vanilla.index.html" >/dev/null
install -d "${APP_DIR}/workspace/vanilla"
mv -f "${APP_DIR}/workspace/vanilla.index.html" "${APP_DIR}/workspace/vanilla/index.html"

# CLAUDE.md (project guidance)
mkdir -p "${APP_DIR}/workspace"
CLAUDE_NAME="$NAME" DOMAIN_BASE="$DOMAIN_BASE" render "$ROOT_DIR/templates/CLAUDE.md.tmpl" "${APP_DIR}/workspace/CLAUDE.md" >/dev/null

# Claude permissions (allow everything for inner Claude)
mkdir -p "${APP_DIR}/workspace/.claude"
cp "$ROOT_DIR/templates/settings.local.json.tmpl" "${APP_DIR}/workspace/.claude/settings.local.json"

# Dockerfile & compose
NODE_VERSION="${NODE_VERSION}" render "$ROOT_DIR/templates/Dockerfile.tmpl" "${APP_DIR}/Dockerfile" >/dev/null

# Set traefik entrypoint and domain (without port for Host rules)
export TRAEFIK_ENTRYPOINT="$(get_traefik_entrypoint)"
export DOMAIN_FOR_HOST="$(get_domain_without_port)"
NAME="$NAME" DOMAIN_BASE="$DOMAIN_FOR_HOST" TRAEFIK_NETWORK="$TRAEFIK_NETWORK" TRAEFIK_ENTRYPOINT="$TRAEFIK_ENTRYPOINT" MEM_RESERVATION="$MEM_RESERVATION" MEM_LIMIT="$MEM_LIMIT" CPU_LIMIT="$CPU_LIMIT" render "$ROOT_DIR/templates/docker-compose.yml.tmpl" "${APP_DIR}/docker-compose.yml" >/dev/null

# Mount SSH keys for git operations (both local and remote modes)
if [ -d "${HOME}/.ssh" ]; then
  sed -i.bak '/- \.\/workspace:\/workspace:rw/a\
      - '"${HOME}"'/.ssh:/tmp/host-ssh:ro' "${APP_DIR}/docker-compose.yml"
  rm -f "${APP_DIR}/docker-compose.yml.bak"
fi

# Remote mode: Add TLS labels
if ! is_local_mode; then
  # Insert TLS certresolver labels after entrypoints lines
  sed -i.bak '/entrypoints=websecure/a\
      - "traefik.http.routers.'"${NAME}"'.tls.certresolver=letsencrypt"' "${APP_DIR}/docker-compose.yml"
  sed -i.bak '/entrypoints=websecure/a\
      - "traefik.http.routers.dev-'"${NAME}"'.tls.certresolver=letsencrypt"' "${APP_DIR}/docker-compose.yml"
  sed -i.bak '/entrypoints=websecure/a\
      - "traefik.http.routers.vanilla-'"${NAME}"'.tls.certresolver=letsencrypt"' "${APP_DIR}/docker-compose.yml"
  rm -f "${APP_DIR}/docker-compose.yml.bak"
fi

# Ownership for runtime user (10001)
chown -R 10001:10001 "${APP_DIR}/workspace" || true

# Build + up
log "Building and starting '${NAME}'…"
( cd "${APP_DIR}" && docker compose up -d --build )

wait_running "$CONTAINER_NAME"

# Next.js is initialized automatically by container startup script
log "Waiting for Next.js initialization to complete…"
for i in $(seq 1 30); do
  if docker exec -u appuser "$CONTAINER_NAME" bash -lc '[ -f /workspace/app/package.json ]' 2>/dev/null; then
    log "Next.js project initialized."
    break
  fi
  sleep 1
done

# Create .gitignore for secrets protection
log "Creating .gitignore in workspace…"
cat > "${APP_DIR}/workspace/.gitignore" <<'EOF'
# Dependencies
node_modules/
.pnp
.pnp.js

# Build outputs
.next/
out/
dist/
build/

# Environment & Secrets
.env
.env.*
!.env.example
*.key
*.pem
*.pfx
*.p12

# API Keys & Credentials
**/ANTHROPIC_KEY*
**/anthropic_key*
**/*api_key*
**/*secret*
credentials.json
auth.json

# PM2
.pm2/
pm2.log

# Claude
.claude/
.claude.json

# OS
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Testing
coverage/
.nyc_output/

# Misc
.cache/
*.pid
*.seed
*.tmp
EOF
chown 10001:10001 "${APP_DIR}/workspace/.gitignore" || true

# Health checks
health_vanilla_inside "$CONTAINER_NAME"

if [ "$VERIFY" -eq 1 ]; then
  health_traefik_route "vanilla-${NAME}.${DOMAIN_BASE}"
else
  log "Skipping Traefik route check (use --verify to enable)"
fi

PROTOCOL="$(get_protocol)"

cat <<EOF

✅ Sandbox ready
   PROD:    ${PROTOCOL}://${NAME}.${DOMAIN_BASE}        (:3000 expected)
   DEV:     ${PROTOCOL}://dev-${NAME}.${DOMAIN_BASE}    (:8000 expected)
   VANILLA: ${PROTOCOL}://vanilla-${NAME}.${DOMAIN_BASE} (static :9000 — running now)
   Workspace: ${APP_DIR}/workspace
   Next app:  ${APP_DIR}/workspace/app
   Container: ${CONTAINER_NAME}

Enter and start Claude:
   claudez enter ${NAME}

Verify routing: claudez status ${NAME}
EOF
