# syntax=docker/dockerfile:1
ARG NODE_VERSION=${NODE_VERSION}
FROM node:${NODE_VERSION}-slim

# base deps (+ tmux so Claude sessions survive disconnects)
RUN apt-get update && apt-get install -y --no-install-recommends \
      tini wget ca-certificates git tmux \
    && rm -rf /var/lib/apt/lists/*

# global tools
RUN npm install -g @anthropic-ai/claude-code pm2 http-server pnpm && \
    pm2 install pm2-logrotate && \
    pm2 set pm2-logrotate:max_size 10M && \
    pm2 set pm2-logrotate:retain 5 && \
    pm2 set pm2-logrotate:compress true

# startup script (as root), then drop privileges
RUN install -d /usr/local/bin && \
    cat >/usr/local/bin/startup.sh <<'EOS'
#!/usr/bin/env bash
set -e

# Pre-seed Claude onboarding state for the runtime user
if [ -n "${ANTHROPIC_API_KEY:-}" ]; then
  HOME="/home/appuser"
  mkdir -p "${HOME}"
  KEY_TAIL="$(printf "%s" "$ANTHROPIC_API_KEY" | tail -c 20 2>/dev/null || echo "")"
  TARGET_JSON="${HOME}/.claude.json"
  # If symlinked (persisted), ensure target directory exists
  if [ -L "${TARGET_JSON}" ]; then
    LINK_TARGET="$(readlink "${TARGET_JSON}")"
    mkdir -p "$(dirname "$LINK_TARGET")"
  else
    mkdir -p "$(dirname "$TARGET_JSON")"
  fi
  cat > "${TARGET_JSON}" <<JSON
{
  "customApiKeyResponses": { "approved": ["${KEY_TAIL}"], "rejected": [] },
  "shiftEnterKeyBindingInstalled": true,
  "theme": "dark",
  "hasCompletedOnboarding": true
}
JSON
  chown appuser:appuser "${TARGET_JSON}"
  chmod 600 "${TARGET_JSON}"

  # Write API key to file for better security (not visible in ps/proc)
  mkdir -p /home/appuser/.config
  echo "$ANTHROPIC_API_KEY" > /home/appuser/.config/anthropic_key
  chown appuser:appuser /home/appuser/.config/anthropic_key
  chmod 600 /home/appuser/.config/anthropic_key
fi

# Fix workspace ownership for inner Claude (after creating .claude dir)
chown -R appuser:appuser /workspace 2>/dev/null || true

# cc wrapper â€” runs Claude inside tmux (auto-attach), from /workspace
cat >/usr/local/bin/cc <<'SH'
#!/usr/bin/env bash
set -euo pipefail
cd /workspace
# Optional custom session name: cc -s mytask
SESS="claude"
if [ "${1:-}" = "-s" ]; then SESS="${2:-claude}"; shift 2; fi

# If already inside tmux, just run claude
if [ -n "${TMUX:-}" ]; then
  exec claude "$@"
fi

# If tmux exists, attach/create; else fallback to claude
if command -v tmux >/dev/null 2>&1; then
  exec tmux new-session -A -s "$SESS" "claude $*"
else
  exec claude "$@"
fi
SH
chmod +x /usr/local/bin/cc

# Disk space monitoring script
cat >/usr/local/bin/check-disk.sh <<'SH'
#!/usr/bin/env bash
USAGE=$(df /workspace | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$USAGE" -gt 80 ]; then
  echo "WARNING: /workspace disk usage at ${USAGE}%"
  du -sh /workspace/* 2>/dev/null | sort -rh | head -5
fi
SH
chmod +x /usr/local/bin/check-disk.sh

# PM2 auto-save watchdog - saves pm2 state every 5 minutes
cat >/usr/local/bin/pm2-watchdog.sh <<'SH'
#!/usr/bin/env bash
while true; do
  sleep 300
  su -m appuser -c "pm2 save" >/dev/null 2>&1 || true
done
SH
chmod +x /usr/local/bin/pm2-watchdog.sh

# Drop to appuser and start services
# Note: Preserve ANTHROPIC_API_KEY in environment for Claude to use
export ANTHROPIC_API_KEY

# Start pm2 watchdog in background (as root, switches to appuser internally)
/usr/local/bin/pm2-watchdog.sh &

exec su -m appuser -c '
  cd /workspace
  pm2 start "http-server /workspace/vanilla -p 9000 --silent" --name vanilla >/dev/null 2>&1 || true
  pm2 save >/dev/null 2>&1 || true

  # Run disk check on startup
  /usr/local/bin/check-disk.sh || true

  sleep infinity
'
EOS
RUN chmod +x /usr/local/bin/startup.sh

# runtime user
RUN useradd -m -u 10001 appuser && \
    mkdir -p /home/appuser/.config && \
    chown -R appuser:appuser /home/appuser/.config
WORKDIR /workspace

# Optional persisted config symlink: store file in /workspace/.claude/claude.json
RUN mkdir -p /workspace/.claude && \
    chown -R appuser:appuser /workspace/.claude

USER appuser
RUN [ -e /home/appuser/.claude.json ] || ln -s /workspace/.claude/claude.json /home/appuser/.claude.json

USER root
ENV PORT=3000
ENTRYPOINT ["/usr/bin/tini","--"]
CMD ["bash","-lc","/usr/local/bin/startup.sh"]
