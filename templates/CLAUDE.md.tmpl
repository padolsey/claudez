# Claude Workspace Context for **${CLAUDE_NAME}**

You are Claude, my autonomous coding pair inside a secure Docker sandbox.

## Quick Start

**A fresh Next.js 15 project is already set up for you in `/workspace/app/`** - no need to create one!

To get started:
```bash
cd /workspace/app
ls -la                    # See the project structure
cat package.json          # Check what's installed
pm2 start "pnpm dev -- --hostname 0.0.0.0 --port 8000" --name nextjs-dev --cwd /workspace/app
pm2 logs nextjs-dev       # Watch the dev server start
```

Then visit: `https://dev-${CLAUDE_NAME}.${DOMAIN_BASE}` to see the app running.

## Environment Awareness
- **You're running inside a Docker container** - Don't try to install Docker, systemd, or other system services
- **User context:** You run as `appuser` (UID 10001), not root - you cannot `sudo` or install system packages
- **Tmux session:** You're inside tmux session `claude` - use `Ctrl+B D` to detach (don't exit the shell)
- **Resource limits:** 3GB RAM (5GB for large sandboxes), 1 CPU core - be mindful of heavy builds and concurrent processes
- **Network access:** Full outbound internet access; only ports 3000/8000/9000 are routed via Traefik

## Routing & Ports
- **Production:** https://${CLAUDE_NAME}.${DOMAIN_BASE} → container **:3000**
- **Development:** https://dev-${CLAUDE_NAME}.${DOMAIN_BASE} → container **:8000**
- **Vanilla static:** https://vanilla-${CLAUDE_NAME}.${DOMAIN_BASE} → container **:9000**

## Project Layout

**You have a fresh Next.js 15 project already scaffolded and ready to use:**

- **`/workspace/app/`** - Your main Next.js project (App Router, TypeScript, Tailwind CSS v4)
  - Already initialized with `pnpm create next-app`
  - Dependencies installed and ready to go
  - **Start here** - modify, extend, or completely rebuild this project as needed
  - Structure: `app/page.tsx`, `app/layout.tsx`, `package.json`, etc.

- **`/workspace/vanilla/`** - Static demo site (already running on :9000 via pm2)
  - Process name: **vanilla** (check with `pm2 list`)
  - Used for quick routing verification

- **`/workspace/CLAUDE.md`** - This context file (read it anytime for reference)

- **`/workspace/.claude-logs/`** - Your session logs (automatic, survives crashes)

- **`/workspace/.debug/`** - Memory pressure logs (created if low memory occurs)

## Tech Stack & Conventions
- **Package manager:** Always use **pnpm** (not npm/yarn) - faster, disk-efficient, strict
- **TypeScript:** Prefer strict typing; avoid `any` unless genuinely necessary
- **Tailwind CSS:** Use utility-first styling; avoid writing custom CSS unless required
- **Linting:** Keep it practical - fix real issues, don't bikeshed formatting
- **Testing:** Use **Jest** for unit/integration tests
  - Only write tests for non-trivial business/domain logic
  - Skip tests for simple CRUD, basic routing, or obvious UI plumbing
  - Focus on: algorithms, state machines, data transformations, edge cases
  - Test behavior, not implementation details

## Persistence & Data
- **Persistent:** `/workspace` directory survives container restarts - commit important work to git
- **Ephemeral:** Everything else (`/tmp`, `~/.pm2`, global node_modules) is reset on container restart
- **No automatic backups** - workspace is persistent but not backed up; use git commits
- **PM2 state:** After adding/removing pm2 processes, run `pm2 save` so they survive restarts
- **Logs:** PM2 logs are in `~/.pm2/logs/` - check them if services fail

## Process Management (CRITICAL)
- **CRITICAL: Always use pm2 to manage long-running processes.** Never run `pnpm dev`, `pnpm start`, or similar commands directly in the foreground, as this will kill the container's main process and kick you out.
- Use **pm2** to manage processes. Prefer explicit cwd and ports:
  - Dev: `pm2 start "pnpm dev -- --hostname 0.0.0.0 --port 8000" --name nextjs-dev --cwd /workspace/app`
  - Prod: `pm2 start "pnpm start" --name nextjs-prod --cwd /workspace/app` (app listens on :3000)
  - To restart: `pm2 restart <name>` or `pm2 delete <name>` then start again
  - To view logs: `pm2 logs <name>`
  - To list: `pm2 list`
  - **After changes:** `pm2 save` to persist process list across restarts
- **CRITICAL:** Always use `--hostname 0.0.0.0` for dev servers or they won't be accessible via Traefik. Dev servers default to localhost-only binding.

## Git & Private Repositories
- **SSH access:** Host SSH keys are mounted for seamless private repo access
- **Clone private repos:** Just use normal git clone - authentication works automatically
  - `git clone git@github.com:user/private-repo.git`
  - `git clone https://github.com/user/private-repo.git` (auto-converted to SSH)
- **No manual auth needed:** SSH keys and git config are pre-configured
- **Tools available:** `ssh`, `curl`, `wget`, `git` all ready to use

## Security & Best Practices
- **API key security:** Your Anthropic API key is in `$ANTHROPIC_API_KEY` - never echo/log it, never commit to git
- **Real costs:** This is a real API key with real billing - be mindful of API call volume
- **Secrets:** Don't commit `.env` files, API keys, or credentials to git - they're in `.gitignore`
- **Dependencies:** If you need system packages (build-essential, python, etc.), ask the user to rebuild the container
- Use **plain `fetch`** for API calls; avoid heavy SDKs to keep the container lean

## Resource Management
- **Disk space:** node_modules and build artifacts can be large - run `pnpm prune` or `rm -rf .next` if needed
- **Memory:** With 3GB RAM (5GB for large sandboxes), you can run dev + occasional builds, but avoid too many concurrent heavy processes
- **CPU:** Single core means heavy builds (TypeScript compilation, bundling) will be slower
- **Dependencies:** Use `pnpm add <pkg>` / `pnpm add -D <pkg>` for adding packages to the Next.js project

## Debugging & Recovery
- **Session logs:** Your terminal I/O is automatically saved to `/workspace/.claude-logs/` (via tmux pipe-pane)
- **Memory logs:** Low memory warnings (<100MB) are logged to `/workspace/.debug/memory.log`
- **Container logs:** Docker logs capture stdout/stderr, accessible via `docker logs` or `provision logs`
- **Purpose:** If the session crashes or OOM kills, these logs help diagnose and resume work

## Your Mission

You're here to help build, modify, and iterate on web applications. Your workspace has a **fresh Next.js 15 project already set up** in `/workspace/app/`.

**Typical workflow:**
1. Understand what the user wants to build/change
2. Modify the existing Next.js project in `/workspace/app/`
3. Start the dev server with pm2: `pm2 start "pnpm dev -- --hostname 0.0.0.0 --port 8000" --name nextjs-dev --cwd /workspace/app`
4. User can view changes at `https://dev-${CLAUDE_NAME}.${DOMAIN_BASE}`
5. When ready for production: build and start on :3000

**Guidelines:**
- Take initiative; explain major steps before destructive changes
- Prioritize clarity, robustness, and streaming (SSE) where relevant
- If you need system packages or hit resource limits, ask the user
- The Next.js app is already there - **don't create a new project**, just modify what exists
